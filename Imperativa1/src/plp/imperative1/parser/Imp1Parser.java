/* Generated By:JavaCC: Do not edit this line. Imp1Parser.java */
package plp.imperative1.parser;

import plp.expressions1.util.*;
import plp.expressions2.expression.*;
import plp.imperative1.command.*;
import plp.imperative1.declaration.*;
import plp.imperative1.memory.*;
import plp.imperative1.*;
import java.util.*;

public class Imp1Parser implements Imp1ParserConstants {

    public static void main(String args[]) {
        ListaValor entrada = new ListaValor();
            Imp1Parser parser;
            if (args.length == 0) {
                System.out.println("Imperativa 1 PLP Parser Version 0.0.2:  Reading from standard input . . .");
                parser = new Imp1Parser(System.in);
            } else  {
                System.out.println("Imperativa 1 PLP Parser Version 0.0.2:  Reading from file " + args[0] + " . . .");
                try {
                        parser = new Imp1Parser(new java.io.FileInputStream(args[0]));
                } catch (java.io.FileNotFoundException e) {
                        System.out.println("Java Parser Version 1.0.2:  File " + args[0] + " not found.");
                        return;
                }

                List valores = new LinkedList();
                for(int i=1;i<args.length;i++)
                {
                        String parametro = args[i];

                        try {
                                Integer inteiro = Integer.valueOf(parametro);
                                valores.add(new ValorInteiro(inteiro.intValue()));
                                continue;
                        } catch(NumberFormatException e) {

                        }

                        if(parametro.equalsIgnoreCase("true")
                            || parametro.equalsIgnoreCase("false")) {
                                Boolean booleano = Boolean.valueOf(parametro);
                                valores.add(new ValorBooleano(booleano.booleanValue()));
                        } else {
                            valores.add(new ValorString(parametro));
                        }
                }

                  entrada = criaListaValor(valores);
            }

            try {
            Programa programa = parser.Input();
            System.out.println("Imperativa 1 PLP Parser Version 0.0.2:  Imperativa2 program parsed successfully.");
            if(programa.checaTipo(new ContextoCompilacaoImperativa(entrada))) {
                ListaValor saida = programa.executar(new ContextoExecucaoImperativa(entrada));
                System.out.println(saida);
            }
            else {
                System.out.println("Erro de tipo");
            }
        } catch (Exception e) {
            System.out.println("Imperativa 1 PLP Parser Version 0.0.2:  Encountered errors during parse.");
            e.printStackTrace();
        }
        }

        public static ListaValor criaListaValor(List valores) {
                if(valores.size() == 0) {
                        return new ListaValor();
                }

                Valor primeiro = (Valor) valores.get(0);
                valores.remove(0);
                return new ListaValor(primeiro, criaListaValor(valores));

        }

  static final public Programa Input() throws ParseException {
    Programa retorno;
    retorno = PPrograma();
    jj_consume_token(0);
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Programa PPrograma() throws ParseException {
        Comando retorno;
    retorno = PComando();
                {if (true) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Comando PComando() throws ParseException {
        Comando retorno;
    if (jj_2_1(2147483647)) {
      retorno = PSequenciaComando();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMAND_SKIP:
      case WHILE:
      case READ:
      case WRITE:
      case IF:
      case IDENTIFIER:
      case LPAREN:
      case LBRACE:
        retorno = PComandoSimples();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public SequenciaComando PSequenciaComando() throws ParseException {
        Comando c1;
        Comando c2;
    c1 = PComandoSimples();
    jj_consume_token(SEMICOLON);
    c2 = PComando();
         {if (true) return new SequenciaComando(c1, c2);}
    throw new Error("Missing return statement in function");
  }

  static final public IO PIO() throws ParseException {
        IO retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case READ:
      retorno = PRead();
      break;
    case WRITE:
      retorno = PWrite();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
         {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Read PRead() throws ParseException {
        Id id;
    jj_consume_token(READ);
    jj_consume_token(LPAREN);
    id = PId();
    jj_consume_token(RPAREN);
         {if (true) return new Read (id);}
    throw new Error("Missing return statement in function");
  }

  static final public Write PWrite() throws ParseException {
        Expressao exp;
    jj_consume_token(WRITE);
    jj_consume_token(LPAREN);
    exp = PExpressao();
    jj_consume_token(RPAREN);
         {if (true) return new Write(exp);}
    throw new Error("Missing return statement in function");
  }

  static final public IfThenElse PIfThenElse() throws ParseException {
        Expressao expressao;
        Comando comandoThen;
        Comando comandoElse;
    jj_consume_token(IF);
    expressao = PExpressao();
    jj_consume_token(THEN);
    comandoThen = PComando();
    jj_consume_token(ELSE);
    comandoElse = PComando();
         {if (true) return new IfThenElse (expressao, comandoThen, comandoElse);}
    throw new Error("Missing return statement in function");
  }

  static final public While PWhile() throws ParseException {
        Expressao expressao;
        Comando comando;
    jj_consume_token(WHILE);
    expressao = PExpressao();
    jj_consume_token(DO);
    comando = PComando();
         {if (true) return new While(expressao, comando);}
    throw new Error("Missing return statement in function");
  }

  static final public Skip PSkip() throws ParseException {
    jj_consume_token(COMAND_SKIP);
         {if (true) return new Skip();}
    throw new Error("Missing return statement in function");
  }

  static final public Atribuicao PAtribuicao() throws ParseException {
        Id id;
        Expressao exp;
    id = PId();
    jj_consume_token(ATTRIB);
    exp = PExpressao();
                {if (true) return new Atribuicao(id, exp);}
    throw new Error("Missing return statement in function");
  }

  static final public Id PId() throws ParseException {
        Token token;
    token = jj_consume_token(IDENTIFIER);
                {if (true) return new Id(token.toString());}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorInteiro() throws ParseException {
        Token token;
    token = jj_consume_token(INTEGER_LITERAL);
                {if (true) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
      jj_consume_token(FALSE);
                    {if (true) return new ValorBooleano(false);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
                    {if (true) return new ValorBooleano(true);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorString() throws ParseException {
        Token token;
    token = jj_consume_token(STRING_LITERAL);
                String tokenStr = token.toString();
                tokenStr = tokenStr.substring(1,tokenStr.length()-1);
                {if (true) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValor() throws ParseException {
        Valor retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      retorno = PValorInteiro();
      break;
    case TRUE:
    case FALSE:
      retorno = PValorBooleano();
      break;
    case STRING_LITERAL:
      retorno = PValorString();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpMenos() throws ParseException {
        Expressao retorno;
    jj_consume_token(MINUS);
    retorno = PExpressao();
                {if (true) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpNot() throws ParseException {
        Expressao retorno;
    jj_consume_token(NOT);
    retorno = PExpressao();
                {if (true) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpLength() throws ParseException {
        Expressao retorno;
    jj_consume_token(LENGTH);
    retorno = PExpressao();
                {if (true) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpPrimaria() throws ParseException {
    Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      retorno = PId();
      break;
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
      retorno = PValor();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      retorno = PExpressao();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpUnaria() throws ParseException {
        Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      retorno = PExpMenos();
      break;
    case NOT:
      retorno = PExpNot();
      break;
    case LENGTH:
      retorno = PExpLength();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpBinaria() throws ParseException {
        Expressao retorno, param2;
    if (jj_2_2(2147483647)) {
      retorno = PExpConcat();
    } else if (jj_2_3(2147483647)) {
      retorno = PExpSub();
    } else if (jj_2_4(2147483647)) {
      retorno = PExpAnd();
    } else if (jj_2_5(2147483647)) {
      retorno = PExpOr();
    } else if (jj_2_6(2147483647)) {
      retorno = PExpEquals();
    } else if (jj_2_7(2147483647)) {
      retorno = PExpSoma();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public ExpSoma PExpSoma() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(PLUS);
    dir = PExpressao();
         {if (true) return new ExpSoma(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpSub PExpSub() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(MINUS);
    dir = PExpressao();
         {if (true) return new ExpSub(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpAnd PExpAnd() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(AND);
    dir = PExpressao();
         {if (true) return new ExpAnd(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpOr PExpOr() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(OR);
    dir = PExpressao();
         {if (true) return new ExpOr(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpEquals PExpEquals() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(EQ);
    dir = PExpressao();
         {if (true) return new ExpEquals(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public ExpConcat PExpConcat() throws ParseException {
        Expressao esq;
        Expressao dir;
    esq = PExpPrimaria();
    jj_consume_token(CONCAT);
    dir = PExpressao();
         {if (true) return new ExpConcat(esq, dir);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpressao() throws ParseException {
        Expressao retorno;
    if (jj_2_8(2)) {
      retorno = PExpUnaria();
    } else if (jj_2_9(2147483647)) {
      retorno = PExpBinaria();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case INTEGER_LITERAL:
      case STRING_LITERAL:
      case IDENTIFIER:
      case LPAREN:
        retorno = PExpPrimaria();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

/*  ADICIONADO OU MODIFICADO DA Imperativa1 PARA A Imperativa2  */
  static final public Comando PComandoSimples() throws ParseException {
        Comando retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMAND_SKIP:
      retorno = PSkip();
      break;
    case IDENTIFIER:
      retorno = PAtribuicao();
      break;
    case LBRACE:
      retorno = PComandoDeclaracao();
      break;
    case WHILE:
      retorno = PWhile();
      break;
    case IF:
      retorno = PIfThenElse();
      break;
    case READ:
    case WRITE:
      retorno = PIO();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      retorno = PComando();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public ComandoDeclaracao PComandoDeclaracao() throws ParseException {
        Declaracao dec;
        Comando comando;
    jj_consume_token(LBRACE);
    dec = PDeclaracao();
    jj_consume_token(SEMICOLON);
    comando = PComando();
    jj_consume_token(RBRACE);
                {if (true) return new ComandoDeclaracao(dec, comando);}
    throw new Error("Missing return statement in function");
  }

  static final public Declaracao PDeclaracao() throws ParseException {
        Declaracao retorno;
    if (jj_2_10(2147483647)) {
      retorno = PDeclaracaoComposta();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        retorno = PDeclaracaoVariavel();
        break;
      case LPAREN:
        jj_consume_token(LPAREN);
        retorno = PDeclaracao();
        jj_consume_token(RPAREN);
        break;
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
         {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public DeclaracaoComposta PDeclaracaoComposta() throws ParseException {
        Declaracao d1;
        Declaracao d2;
    d1 = PDeclaracaoVariavel();
    jj_consume_token(COMMA);
    d2 = PDeclaracao();
         {if (true) return new DeclaracaoComposta(d1, d2);}
    throw new Error("Missing return statement in function");
  }

  static final public DeclaracaoVariavel PDeclaracaoVariavel() throws ParseException {
        Id id;
        Expressao exp;
        DeclaracaoVariavel retorno;
    jj_consume_token(VAR);
    id = PId();
    jj_consume_token(ASSIGN);
    exp = PExpressao();
                 retorno = new DeclaracaoVariavel(id, exp);
                {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(COMAND_SKIP)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(DO)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(EQ)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(CONCAT)) return true;
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_3R_64()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(THEN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    if (jj_3R_61()) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_scan_token(WRITE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) {
    jj_scanpos = xsp;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_scan_token(READ)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_4() {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_3() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_4()) return true;
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_4()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_1()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_2() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_33() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_3R_1()) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(LENGTH)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_3R_49()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_2()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(9)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(61)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_1() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_5()) {
    jj_scanpos = xsp;
    if (jj_3R_6()) {
    jj_scanpos = xsp;
    if (jj_3R_7()) {
    jj_scanpos = xsp;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_38()) {
    jj_scanpos = xsp;
    if (jj_3R_39()) {
    jj_scanpos = xsp;
    if (jj_3R_40()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_2()) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_3()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_8()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    return false;
  }

  static private boolean jj_3R_58() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(CONCAT)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(EQ)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(OR)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(ATTRIB)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    if (jj_3R_2()) return true;
    if (jj_scan_token(AND)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Imp1ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x3b0000,0x180000,0x6000,0x20006000,0x20006000,0x1800,0x20006000,0x3b0000,0x8000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xa4,0x0,0x0,0x2,0x26,0x40000000,0x26,0xa4,0x20,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[10];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Imp1Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Imp1Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Imp1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Imp1Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new Imp1ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Imp1Parser(Imp1ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(Imp1ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[69];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 69; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 10; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
