/* Generated By:JavaCC: Do not edit this line. Exp2ParserConstants.java */
package le2.plp.expressions2.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface Exp2ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 6;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 7;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 8;
  /** RegularExpression Id. */
  int AND = 9;
  /** RegularExpression Id. */
  int OR = 10;
  /** RegularExpression Id. */
  int NOT = 11;
  /** RegularExpression Id. */
  int LENGTH = 12;
  /** RegularExpression Id. */
  int TRUE = 13;
  /** RegularExpression Id. */
  int FALSE = 14;
  /** RegularExpression Id. */
  int LET = 15;
  /** RegularExpression Id. */
  int VAR = 16;
  /** RegularExpression Id. */
  int IN = 17;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 18;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 19;
  /** RegularExpression Id. */
  int HEX_LITERAL = 20;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 21;
  /** RegularExpression Id. */
  int STRING_LITERAL = 22;
  /** RegularExpression Id. */
  int IDENTIFIER = 23;
  /** RegularExpression Id. */
  int LETTER = 24;
  /** RegularExpression Id. */
  int DIGIT = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACE = 28;
  /** RegularExpression Id. */
  int RBRACE = 29;
  /** RegularExpression Id. */
  int LBRACKET = 30;
  /** RegularExpression Id. */
  int RBRACKET = 31;
  /** RegularExpression Id. */
  int SEMICOLON = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int ASSIGN = 35;
  /** RegularExpression Id. */
  int GT = 36;
  /** RegularExpression Id. */
  int LT = 37;
  /** RegularExpression Id. */
  int BANG = 38;
  /** RegularExpression Id. */
  int TILDE = 39;
  /** RegularExpression Id. */
  int HOOK = 40;
  /** RegularExpression Id. */
  int COLON = 41;
  /** RegularExpression Id. */
  int EQ = 42;
  /** RegularExpression Id. */
  int LE = 43;
  /** RegularExpression Id. */
  int GE = 44;
  /** RegularExpression Id. */
  int NE = 45;
  /** RegularExpression Id. */
  int SC_OR = 46;
  /** RegularExpression Id. */
  int SC_AND = 47;
  /** RegularExpression Id. */
  int CONCAT = 48;
  /** RegularExpression Id. */
  int PLUS = 49;
  /** RegularExpression Id. */
  int MINUS = 50;
  /** RegularExpression Id. */
  int STAR = 51;
  /** RegularExpression Id. */
  int SLASH = 52;
  /** RegularExpression Id. */
  int BIT_AND = 53;
  /** RegularExpression Id. */
  int BIT_OR = 54;
  /** RegularExpression Id. */
  int XOR = 55;
  /** RegularExpression Id. */
  int REM = 56;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<SINGLE_LINE_COMMENT>",
    "<FORMAL_COMMENT>",
    "<MULTI_LINE_COMMENT>",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"length\"",
    "\"true\"",
    "\"false\"",
    "\"let\"",
    "\"var\"",
    "\"in\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
  };

}
