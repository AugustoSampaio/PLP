/* Generated By:JavaCC: Do not edit this line. Exp2Parser.java */
package plp.expressions2.parser;
import plp.expressions2.*;
import plp.expressions2.memory.*;
import plp.expressions2.declaration.*;
import plp.expressions2.expression.*;
import java.util.List;
import java.util.LinkedList;

public class Exp2Parser implements Exp2ParserConstants {
  public static void main(String args [])
  {
    Exp2Parser parser;
    if (args.length == 0)
    {
      System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  Reading from standard input . . .");
      parser = new Exp2Parser(System.in);
    }
    else if (args.length == 1)
    {
      System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  Reading from file " + args [0] + " . . .");
      try
      {
        parser = new Exp2Parser(new java.io.FileInputStream(args [0]));
      }
      catch (java.io.FileNotFoundException e)
      {
        System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  File " + args [0] + " not found.");
        return;
      }
    }
    else
    {
      System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  Usage is one of:");
      System.out.println("         java Exp2Parser < inputfile");
      System.out.println("OR");
      System.out.println("         java Exp2Parser inputfile");
      return;
    }
    try
    {
      Programa programa = parser.Input();
      System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  Expressoes2 program parsed successfully.");
      try
      {
        if (!programa.checaTipo())
        {
          System.out.println("Erro de tipo.");
        }
        else
        {
          System.out.println(programa.executar());
        }
      }
      catch (VariavelJaDeclaradaException ee)
      {
        System.out.println("Erro: " + ee);
        ee.printStackTrace();
      }
      catch (VariavelNaoDeclaradaException ee)
      {
        System.out.println("Erro: " + ee);
        ee.printStackTrace();
      }
    }
    catch (ParseException e)
    {
      e.printStackTrace();
      System.out.println("Expressoes 2 PLP Parser Version 0.0.1:  Encountered errors during parse.");
    }
  }

  static final public Programa Input() throws ParseException {
  Programa retorno;
    retorno = PPrograma();
    jj_consume_token(0);
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorInteiro() throws ParseException {
  Token token;
    token = jj_consume_token(INTEGER_LITERAL);
    {if (true) return new ValorInteiro(Integer.parseInt(token.toString()));}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorBooleano() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FALSE:
      jj_consume_token(FALSE);
    {if (true) return new ValorBooleano(false);}
      break;
    case TRUE:
      jj_consume_token(TRUE);
    {if (true) return new ValorBooleano(true);}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValorString() throws ParseException {
  Token token;
    token = jj_consume_token(STRING_LITERAL);
    String tokenStr = token.toString();
    tokenStr = tokenStr.substring(1, tokenStr.length() - 1);
    {if (true) return new ValorString(tokenStr);}
    throw new Error("Missing return statement in function");
  }

  static final public Valor PValor() throws ParseException {
  Valor retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      retorno = PValorInteiro();
      break;
    case TRUE:
    case FALSE:
      retorno = PValorBooleano();
      break;
    case STRING_LITERAL:
      retorno = PValorString();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Id PId() throws ParseException {
  Token token;
    token = jj_consume_token(IDENTIFIER);
    String tokenStr = token.toString();
    //		tokenStr = tokenStr.substring(1,tokenStr.length()-1);
    {if (true) return new Id(tokenStr);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpMenos() throws ParseException {
  Expressao retorno;
    jj_consume_token(MINUS);
    retorno = PExpPrimaria();
    {if (true) return new ExpMenos(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpNot() throws ParseException {
  Expressao retorno;
    jj_consume_token(NOT);
    retorno = PExpPrimaria();
    {if (true) return new ExpNot(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpLength() throws ParseException {
  Expressao retorno;
    jj_consume_token(LENGTH);
    retorno = PExpPrimaria();
    if (retorno instanceof ValorString)
    {
      ValorString val = (ValorString) retorno;
    }
    {if (true) return new ExpLength(retorno);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpPrimaria() throws ParseException {
  Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
      retorno = PValor();
      break;
    case IDENTIFIER:
      retorno = PId();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      retorno = PExpressao();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public List PDeclVar() throws ParseException {
  Id id;
  Expressao expressao;
  List retorno;
    jj_consume_token(VAR);
    id = PId();
    jj_consume_token(ASSIGN);
    expressao = PExpressao();
      retorno = new LinkedList();
      retorno.add(new DecVariavel(id, expressao));
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_1;
      }
      jj_consume_token(COMMA);
      jj_consume_token(VAR);
      id = PId();
      jj_consume_token(ASSIGN);
      expressao = PExpressao();
        retorno.add(new DecVariavel(id, expressao));
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpDeclaracao() throws ParseException {
  List declaracoes;
  Expressao expressao;
    jj_consume_token(LET);
    declaracoes = PDeclVar();
    jj_consume_token(IN);
    expressao = PExpressao();
    {if (true) return new ExpDeclaracao(declaracoes, expressao);}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpUnaria() throws ParseException {
  Expressao retorno;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      retorno = PExpMenos();
      break;
    case NOT:
      retorno = PExpNot();
      break;
    case LENGTH:
      retorno = PExpLength();
      break;
    case TRUE:
    case FALSE:
    case INTEGER_LITERAL:
    case STRING_LITERAL:
    case IDENTIFIER:
    case LPAREN:
      retorno = PExpPrimaria();
      break;
    case LET:
      retorno = PExpDeclaracao();
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpBinaria() throws ParseException {
  Expressao retorno, param2;
    retorno = PExpBinaria2();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQ:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(EQ);
      param2 = PExpBinaria2();
        retorno = new ExpEquals(retorno, param2);
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpBinaria2() throws ParseException {
  Expressao retorno, param2;
    retorno = PExpBinaria3();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
      case CONCAT:
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        param2 = PExpBinaria3();
        retorno = new ExpSoma(retorno, param2);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        param2 = PExpBinaria3();
        retorno = new ExpSub(retorno, param2);
        break;
      case OR:
        jj_consume_token(OR);
        param2 = PExpBinaria3();
        retorno = new ExpOr(retorno, param2);
        break;
      case CONCAT:
        jj_consume_token(CONCAT);
        param2 = PExpBinaria3();
        retorno = new ExpConcat(retorno, param2);
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpBinaria3() throws ParseException {
  Expressao retorno, param2;
    retorno = PExpUnaria();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      param2 = PExpUnaria();
        retorno = new ExpAnd(retorno, param2);
    }
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Expressao PExpressao() throws ParseException {
  Expressao retorno;
    retorno = PExpBinaria();
    {if (true) return retorno;}
    throw new Error("Missing return statement in function");
  }

  static final public Programa PPrograma() throws ParseException {
  Expressao retorno;
    retorno = PExpressao();
    {if (true) return new Programa(retorno);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public Exp2ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[9];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x6000,0x446000,0x4c46000,0x0,0x4c4f800,0x0,0x400,0x400,0x200,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x2,0x40000,0x400,0x70000,0x70000,0x0,};
   }

  /** Constructor with InputStream. */
  public Exp2Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Exp2Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new Exp2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Exp2Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new Exp2ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Exp2Parser(Exp2ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(Exp2ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 9; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[57];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 9; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 57; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
